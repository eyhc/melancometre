/**
 * This module is a specialization of the 
 * {@link db} module for user's notes/remarks
 * 
 * __file:__ `db-notes.ts` \
 * __date:__ 21/01/2025 (fr)
 * @author Elie Carrot
 * @packageDocumentation
 */
import { DataBase } from "./db";

/**
 * Describes a basic note provided by user
 * about his mental health
 */
export interface Note {
    /**
     * A unique identifier
     */
    id: number;

    /**
     * Usefull to sort by date DESC.
     * Prefer a number generated by `Date.now()`
     */
    date: number;

    /**
     * the content of the note provided by user
     */
    text: string;
}

/**
 * Implementation of {@link DataBase} for {@link Note}.
 * @extends DataBase
 */
export class NotesDB extends DataBase {

    /**
     * create table if NotExists
     * @returns a void promise
     */
    public override create(): Promise<void> {
        return new Promise((resolve, reject) => {
            if (this.db === null) 
                return reject(new Error("Database not initialized or closed"));

            this.db.transaction(
                (tx) => {
                    tx.executeSql(
                        `CREATE TABLE IF NOT EXISTS "notes" (
                            "id" INTEGER,
                            "date" INTEGER NOT NULL, 
                            "text" TEXT NOT NULL,
                            PRIMARY KEY("id" AUTOINCREMENT)
                        );`
                    );
                },
                reject,
                resolve
            );
        });
    }

    /**
     * Get the all Notes object saved in the database
     * @returns the data as list
     */
    public override getAll(): Promise<Note[]> {
        return this.getNb();
    }

    /**
     * Get notes from the database
     * @param nb_max  the maximum number of last notes to obtain (optionnal).
     * @returns a promise of a list of notes.
     */
    public getNb(nb_max = -1): Promise<Note[]> {
        return new Promise((resolve, reject) => {
            if (this.db === null) 
                return reject(new Error("Database not initialized or closed"));

            let res: Note[] | null = null;
            this.db.transaction(
                (tx) => {
                    tx.executeSql(
                        'SELECT * FROM notes ORDER BY date DESC' + (nb_max > 0) ? ' LIMIT ?1;' : ';',
                        (nb_max > 0) ? [nb_max] : [],
                        function (_, rs) {
                            res = [];
                            for (let i = 0; i < rs.rows.length; i++) {
                                res.push(rs.rows.item(i));
                            }
                        }
                    );
                },
                reject,
                () => {
                    if (res === null) { reject(new Error("Failled to get data")); }
                    else { resolve(res); }
                }
            );
        });
    }

    /**
     * Inserts the note to the database
     * @param d the note to add
     * @returns a void promise
     */
    public override add(d: Note): Promise<void> {
        return new Promise((resolve, reject) => {
            if (this.db === null)
                return reject(new Error("Database not initialized"));
    
            this.db.transaction(
                (tx) => {
                    tx.executeSql(
                        'INSERT INTO "notes" VALUES (?1,?2);',
                        [d.date, d.text]
                    );
                },
                reject,
                resolve
            );
        });
    }

    /**
     * Erase all data of table "metrics"
     * @returns a void promise
     */
    public override deleteAll(): Promise<void> {
        return new Promise((resolve, reject) => {
            if (this.db === null) 
                return reject(new Error("Database not initialized or closed"));

            this.db.transaction(
                (tx) => {
                    tx.executeSql('DELETE FROM "notes"');
                },
                reject,
                resolve
            );
        });
    }
}
