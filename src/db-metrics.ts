/**
 * This module is a specialization of the {@link db} module.
 * 
 * __file:__ `db-metrics.ts` \
 * __date:__ 21/01/2025 (fr)
 * @author Elie Carrot
 * @packageDocumentation
 */
import { DataBase } from "./db";

/**
 * Describes a basic data provided by user
 * about his mental health
 */
export interface Metric {
    /**
     * Usefull to sort by date ASC.
     * Prefer a number generated by `Date.now()`
     */
    date: number,

    /**
     * It’s an evaluation of the user’s mood 
     * on a scale from 0 to 100.
     */
    moral: number,

    /**
     * It’s an evaluation of the user’s sleep
     * quality on a scale from 0 to 100.
     */
    sleep: number,

    /**
     * It’s an evaluation of the user’s energy
     * gauge on a scale from 0 to 100.
     */
    energy: number,

    /**
     * It’s an evaluation of the user’s suicidal
     * thoughts on a scale from 0 to 100.
     */
    suicidal_ideas: number
}

/**
 * Implementation of {@link DataBase} for {@link Metric}.
 * @extends DataBase
 */
export class MetricsDB extends DataBase {

    /**
     * create table if not exists
     * @returns a void promise
     * @override
     */
    public override create(): Promise<void> {
        return new Promise((resolve, reject) => {
            if (this.db === null) 
                return reject(new Error("Database not initialized or closed"));

            this.db.transaction(
                (tx) => {
                    tx.executeSql(
                        `CREATE TABLE IF NOT EXISTS "metrics" (
                            "date" INTEGER NOT NULL, 
                            "moral" INTEGER NOT NULL, 
                            "sleep" INTEGER NOT NULL,
                            "energy" INTEGER NOT NULL,
                            "suicidal_ideas" INTEGER NOT NULL
                        );`
                    );
                },
                reject,
                resolve
            );
        });
    }

    /**
     * Get the all Metric object saved in the database
     * @returns the data as list
     * @override
     */
    public override getAll(): Promise<Metric[]> {
        return new Promise((resolve, reject) => {
            if (this.db === null) 
                return reject(new Error("Database not initialized or closed"));

            let res: Metric[] | null = null;
            this.db.transaction(
                (tx) => {
                    tx.executeSql(
                        'SELECT * FROM metrics ORDER BY date ASC;',
                        [],
                        function (_, rs) {
                            res = [];
                            for (let i = 0; i < rs.rows.length; i++) {
                                res.push(rs.rows.item(i));
                            }
                        }
                    );
                },
                reject,
                () => {
                    if (res === null) { reject(new Error("Failled to get data")); }
                    else { resolve(res); }
                }
            );
        });
    }

    /**
     * Get the last Sample object saved in the database
     * @returns a promise of this object
     */
    public getLast(): Promise<Metric> {
        return new Promise((resolve, reject) => {
            if (this.db === null) 
                return reject(new Error("Database not initialized or closed"));

            let res: Metric | null = null;
            this.db.transaction(
                (tx) => {
                    tx.executeSql(
                        'SELECT * FROM metrics ORDER BY date DESC LIMIT 1;',
                        [],
                        function (_, rs) {
                            if (rs.rows.length > 0)
                                res = rs.rows.item(0);
                        }
                    );
                },
                reject,
                () => {
                    if (res === null) { reject(new Error("Failled to get data")); }
                    else { resolve(res); }
                }
            );
        });
    }

    /**
     * Add a elt to the data
     * @param d the metric to add 
     * @returns a void promise
     * @override
     */
    public override add(d: Metric): Promise<void> {
        return new Promise((resolve, reject) => {
            if (this.db === null) 
                return reject(new Error("Database not initialized or closed"));

            this.db.transaction(
                (tx) => {
                    tx.executeSql(
                        'INSERT INTO "metrics" VALUES (?1,?2,?3,?4,?5);',
                        [d.date, d.moral, d.sleep, d.energy, d.suicidal_ideas]
                    );
                },
                reject,
                resolve
            );
        });
    }

    /**
     * Erase all data of table "metrics"
     * @returns a void promise
     */
    public override deleteAll(): Promise<void> {
        return new Promise((resolve, reject) => {
            if (this.db === null) 
                return reject(new Error("Database not initialized or closed"));

            this.db.transaction(
                (tx) => {
                    tx.executeSql('DELETE FROM "metrics";');
                },
                reject,
                resolve
            );
        });
    }
}
