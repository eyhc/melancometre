/**
 * Describes a basic data provided by user
 * about his mental health
 * @interface
 */
export interface Sample {
    /**
     * Must be sorted by date ASC.
     * Prefer a number generated by `Date.now()`
     */
    date: number,

    /**
     * A number between 0 and 100
     */
    moral: number,

    /**
     * A number between 0 and 100
     */
    sleep: number,

    /**
     * A number between 0 and 100
     */
    energy: number,

    /**
     * A number between 0 and 100
     */
    suicidal_ideas: number
}

/**
 * TODOC
 */
let db:SQLitePlugin.Database | null = null;

/**
 * TODOC
 * @returns 
 */
export function initDB(): Promise<void> {
    db = window.sqlitePlugin.openDatabase({
        name: 'melancometre.db',
        location: 'default',
        androidDatabaseProvider: 'system',
        androidLockWorkaround: 1
    });

    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        db.transaction(
            (tx) => {
                tx.executeSql(`CREATE TABLE IF NOT EXISTS "data" (
                    "date" INTEGER NOT NULL, 
                    "moral" INTEGER NOT NULL, 
                    "sleep" INTEGER NOT NULL,
                    "energy" INTEGER NOT NULL,
                    "suicidal_ideas" INTEGER NOT NULL
                    );`
                );
            },
            reject,
            resolve
        );
    });
}

/**
 * TODOC
 * @returns 
 */
export function getData(): Promise<Sample[]> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        let res: Sample[] | null;
        db.transaction(
            (tx) => {
                tx.executeSql(
                    'SELECT * FROM data ORDER BY date ASC;',
                    [],
                    function(_, rs) {
                        res = [];
                        for (let i = 0; i < rs.rows.length; i++) {
                            res.push(rs.rows.item(i));
                        }
                    }
                );
            },
            reject,
            () => {
                if (res === null) { reject(new Error("Failled to get data")); }
                else { resolve(res); }
            }
        );
    });
}

/**
 * TODOC
 * @returns 
 */
export function getLastData(): Promise<Sample> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        let res: Sample | null;
        db.transaction(
            (tx) => {
                tx.executeSql(
                    'SELECT * FROM data ORDER BY date DESC LIMIT 1;',
                    [],
                    function(_, rs) {
                        if (rs.rows.length > 0)
                            res = rs.rows.item(0);
                    }
                );
            },
            reject,
            () => {
                if (res === null) { reject(new Error("Failled to get data")); }
                else { resolve(res); }
            }
        );
    });
}

/**
 * TODOC
 * @param s 
 * @returns true on success and false otherwise
 */
export function addData(s: Sample): Promise<void> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        db.transaction(
            (tx) => {
                tx.executeSql(
                    'INSERT INTO "data" VALUES (?1,?2,?3,?4,?5);',
                    [s.date, s.moral, s.sleep, s.energy, s.suicidal_ideas]
                );
            },
            reject,
            resolve
        );
    });
}

/**
 * TODOC
 * @returns 
 */
export function closeDB(): Promise<void> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));
        db.close(() => { db = null; resolve(); }, reject);
    });
}