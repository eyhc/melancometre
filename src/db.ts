/**
 * Describes a basic data provided by user
 * about his mental health
 * @interface
 */
export interface Sample {
    /**
     * May be sorted by date ASC.
     * Prefer a number generated by `Date.now()`
     */
    date: number,

    /**
     * A number between 0 and 100
     */
    moral: number,

    /**
     * A number between 0 and 100
     */
    sleep: number,

    /**
     * A number between 0 and 100
     */
    energy: number,

    /**
     * A number between 0 and 100
     */
    suicidal_ideas: number
}

/**
 * Describes a basic note provided by user
 * about his mental health
 * @interface
 */
export interface Note {
    /**
     * May be sorted by date DESC.
     * Prefer a number generated by `Date.now()`
     */
    date: number;

    /**
     * the content of the note provided by user
     */
    text: string;
}

// the db object
let db:SQLitePlugin.Database | null = null;

/**
 * Opens the database
 * @returns a void promise
 */
export function openDB(): Promise<void> {
    // create db object
    db = window.sqlitePlugin.openDatabase({
        name: 'melancometre.db',
        location: 'default',
        androidDatabaseProvider: 'system',
        androidLockWorkaround: 1
    });

    // creation of the tables if they not exist
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        db.transaction(
            (tx) => {
                tx.executeSql(`CREATE TABLE IF NOT EXISTS "data" (
                    "date" INTEGER NOT NULL, 
                    "moral" INTEGER NOT NULL, 
                    "sleep" INTEGER NOT NULL,
                    "energy" INTEGER NOT NULL,
                    "suicidal_ideas" INTEGER NOT NULL
                    );`
                );
                tx.executeSql(`CREATE TABLE IF NOT EXISTS "notes" (
                    "date" INTEGER NOT NULL, 
                    "text" TEXT NOT NULL
                    );`
                );
            },
            reject,
            resolve
        );
    });
}

/**
 * Get the all Sample object saved in the database
 * @returns the data as list
 */
export function getData(): Promise<Sample[]> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        let res: Sample[] | null = null;
        db.transaction(
            (tx) => {
                tx.executeSql(
                    'SELECT * FROM data ORDER BY date ASC;',
                    [],
                    function(_, rs) {
                        res = [];
                        for (let i = 0; i < rs.rows.length; i++) {
                            res.push(rs.rows.item(i));
                        }
                    }
                );
            },
            reject,
            () => {
                if (res === null) { reject(new Error("Failled to get data")); }
                else { resolve(res); }
            }
        );
    });
}

/**
 * Get the last Sample object saved in the database
 * @returns a promise of this object
 */
export function getLastData(): Promise<Sample> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        let res: Sample | null = null;
        db.transaction(
            (tx) => {
                tx.executeSql(
                    'SELECT * FROM data ORDER BY date DESC LIMIT 1;',
                    [],
                    function(_, rs) {
                        if (rs.rows.length > 0)
                            res = rs.rows.item(0);
                    }
                );
            },
            reject,
            () => {
                if (res === null) { reject(new Error("Failled to get data")); }
                else { resolve(res); }
            }
        );
    });
}

/**
 * Get notes from the database
 * @param nb_max  the maximum number of last notes to obtain (optionnal)
 * @returns 
 */
export function getNotes(nb_max:number = -1): Promise<Note[]> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        let res: Note[] | null = null;
        db.transaction(
            (tx) => {
                tx.executeSql(
                    'SELECT * FROM notes ORDER BY date DESC' + (nb_max > 0) ? ' LIMIT ?1;' : ';',
                    (nb_max > 0) ? [nb_max] : [],
                    function(_, rs) {
                        res = [];
                        for (let i = 0; i < rs.rows.length; i++) {
                            res.push(rs.rows.item(i));
                        }
                    }
                );
            },
            reject,
            () => {
                if (res === null) { reject(new Error("Failled to get data")); }
                else { resolve(res); }
            }
        );
    });
}

/**
 * Add a sample to the data
 * @param s the sample to add 
 * @returns a void promise
 */
export function addData(s: Sample): Promise<void> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        db.transaction(
            (tx) => {
                tx.executeSql(
                    'INSERT INTO "data" VALUES (?1,?2,?3,?4,?5);',
                    [s.date, s.moral, s.sleep, s.energy, s.suicidal_ideas]
                );
            },
            reject,
            resolve
        );
    });
}

/**
 * Inserts the note to the database
 * @param note the note to add
 * @returns a void promise
 */
export function addNote(note: Note): Promise<void> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));

        db.transaction(
            (tx) => {
                tx.executeSql(
                    'INSERT INTO "notes" VALUES (?1,?2);',
                    [note.date, note.text]
                );
            },
            reject,
            resolve
        );
    });
}


/**
 * Erases all data of the database
 * @returns a void promise
 */
export function clear_db(): Promise<void> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));
        
        db.transaction(
            (tx) => { 
                tx.executeSql('DELETE FROM "data";');
                tx.executeSql('DELETE FROM "notes"');
            },
            reject,
            resolve
        );
    });
}

/**
 * Closes the database
 * @returns a void promise
 */
export function closeDB(): Promise<void> {
    return new Promise((resolve, reject) => {
        if (db === null) return reject(new Error("Database not initialized"));
        db.close(() => { db = null; resolve(); }, reject);
    });
}